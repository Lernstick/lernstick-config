#!/bin/sh

# find mounted persistence partition
eval "$(awk '$2 ~ "^/run/live/persistence/" { print "data_partition_device="$1"; mount_point="$2"; filesystem="$3"; mount_options="$4"" }' /proc/mounts)"

if [ -z "$data_partition_device" ]
then
	echo "no mounted persistence partition found, exiting."
	exit 0
fi

# shellcheck disable=SC2154
if echo "$mount_options" | tr ',' '\n' | grep -q "^ro$"
then
	echo "persistence $mount_point is read-only, exiting"
	exit 0
fi

# make sure that unprivileged users have access to file system root
# otherwise they are unable to access btrfs snapshots
# shellcheck disable=SC2154
echo "changing permissions of \"$mount_point\" to 755"
chmod 755 "$mount_point"

mount_subvolume()
{
	subvolume=$1
	mounted_subvolume="$(awk '$2 ~ "^/'"$subvolume"'" { print $2 }' /proc/mounts)"
	if [ "$mounted_subvolume" ]
	then
		echo "subvolume $subvolume already mounted"
	else
		echo "mounting subvolume $subvolume"
		destination="/$subvolume"
		mkdir -p "$destination"
		mount -o subvol="$subvolume" "$data_partition_device" "$destination"
	fi
}

# shellcheck disable=SC2154
echo "filesystem: \"$filesystem\""
if [ "$filesystem" = "btrfs" ]
then
	# activate compression via remount
	# we use zstd on default compression level (which is level 3)
	mount -o remount,compress=zstd "$data_partition_device" "$mount_point"

	# mount known btrfs subvolumes
	mount_subvolume "snapshots"
	mount_subvolume "swap"
fi

# clean up orphaned subvolume
# (created from the root subvolume when booting into a snapshot)
orphaned_id=$(btrfs subvolume list "$mount_point" | grep orphaned$ | awk '{ print $2 }')
if [ "$orphaned_id" ]
then
	echo "found orphaned subvolume with ID $orphaned_id, deleting it."
	btrfs subvolume delete --subvolid "$orphaned_id" "$mount_point"
else
	echo "no orphaned subvolume found"
fi
