#!/bin/sh

# find mounted persistence partition
mounted_persistence=$(grep " /run/live/persistence/" /proc/mounts | grep -v ^tmpfs | grep -v ^aufs)
echo "mounted_persistence: \"$mounted_persistence\""
if [ -z "$mounted_persistence" ]
then
	echo "no mounted persistence partition found, exiting."
	exit 0
fi

# get mount point of persistence partition
mount_point="$(echo "$mounted_persistence" | awk '{ print $2 }')"
echo "mount_point: \"$mount_point\""

# make sure that unprivileged users have access to file system root
# otherwise they are unable to access btrfs snapshots
echo "changing permissions of \"$mount_point\" to 755"
chmod 755 "$mount_point"

# mount snapshots subvolume of btrfs persistence
data_partition_device="$(echo "$mounted_persistence" | awk '{ print $1 }')"
echo "data_partition_device: \"$data_partition_device\""
filesystem="$(lsblk -f "$data_partition_device" --noheadings --output FSTYPE)"
echo "filesystem: \"$filesystem\""
if [ "$filesystem" = "btrfs" ]
then
	# activate compression via remount
	# we use zstd on default compression level (which is level 3)
	mount -o remount,compress=zstd "$data_partition_device" "$mount_point"

	# mount snapshots
	mounted_snapshots=$(grep " /snapshots " /proc/mounts)
	if [ "$mounted_snapshots" ]
	then
		echo "snapshots subvolume already mounted"
	else
		echo "mounting snapshots subvolume"
		destination="/snapshots/"
		mkdir -p "$destination"
		mount -o subvol=snapshots "$data_partition_device" "$destination"
	fi
fi

# clean up orphaned subvolume
# (created from the root subvolume when booting into a snapshot)
orphaned_id=$(btrfs subvolume list "$mount_point" | grep orphaned$ | awk '{ print $2 }')
if [ "$orphaned_id" ]
then
	echo "found orphaned subvolume with ID $orphaned_id, deleting it."
	btrfs subvolume delete --subvolid "$orphaned_id" "$mount_point"
else
	echo "no orphaned subvolume found"
fi
