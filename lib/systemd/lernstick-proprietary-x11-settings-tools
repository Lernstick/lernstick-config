#!/bin/sh -e
#
# Description: Show/Hide appropriate prorietary X11 configuration utilities for Nvidia and ATI FGLRX
#              cards. Must run after 1140-xserver-xorg from live-config.
#

setNoDisplay()
{
	DESKTOP_FILE="${1}"
	if [ -f "${DESKTOP_FILE}" ]
	then
		VALUE="${2}"
		if grep -q ^NoDisplay= "${DESKTOP_FILE}"
		then
			# the desktop file already has a "NoDisplay=" line
			sed -i "s|^NoDisplay=.*|NoDisplay=${VALUE}|" "${DESKTOP_FILE}"
		else
			# the desktop file has NO "NoDisplay=" line yet
			echo "NoDisplay=${VALUE}" >> "${DESKTOP_FILE}"
		fi
	fi
}

showApplication()
{
	setNoDisplay "${1}" "false"
}

hideApplication()
{
	setNoDisplay "${1}" "true"
}

activate_nvidia()
{
	echo "enabling NVIDIA settings"
	# show NVIDIA settings in menu
	showApplication /usr/share/applications/nvidia-settings.desktop

	# activating NVIDIA implies removing ATI settings
	remove_fglrx_settings
}

activate_fglrx()
{
	echo "enabling FGLRX settings"
	# show ATI settings in menu
	showApplication /usr/share/applications/amdcccle.desktop

	# activating ATI implies removing NVIDIA settings
	remove_nvidia_settings
}

# mesa-diverted is the active alternative when xorg drivers are used
activate_mesa_diverted()
{
	echo "enabling Mesa settings"
	# remove ATI and NVIDIA settings
	remove_fglrx_settings
	remove_nvidia_settings
}

remove_fglrx_settings()
{
	# remove ATI settings from menu
	hideApplication /usr/share/applications/amdcccle.desktop
}

remove_nvidia_settings()
{
	# remove NVIDIA settings from menu
	hideApplication /usr/share/applications/nvidia-settings.desktop
}

find_driver() {
    update-alternatives --query glx | grep Value: | sed "s|Value: /usr/lib/||" | sed "s/-/_/"
}

DRIVER=$(find_driver)
activate_"$DRIVER"

# on Nvidia Optimus systems we also enable the Nvidia settings
if systemctl show-environment | grep -q NVIDIA_VERSION
then
	showApplication /usr/share/applications/nvidia-settings.desktop
fi
