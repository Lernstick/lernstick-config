#!/bin/sh

# The kernel framebuffer loads the nouveau driver at early boot stages also on
# systems with a GPU that would be supported by a proprietary driver.
# This can be seen in the following early system log message
# "fb: switching to nouveaufb from ..."
# Because a loaded nouveau driver prevents the proprietary drivers from working
# we let this script run before the kernel/udev loads the framebuffer nouveau
# driver and update its blacklisting depending on the GPU of the current system.

# Regex matching PCI IDs which support two graphic cards with proprietary
# drivers
DUALCARD="^10DE"

Detect_xorg_driver ()
{
	# Side-effect: Sets _NVIDIA_VERSION and _NVIDIA_MODULE if an NVIDIA card is detected

	# without lspci this won't work
	if ! [ -x /usr/bin/lspci ]
	then
		LIVE_XORG_DRIVER="xorg-autoconfig"
		return
	fi

	_DEVICES="$(lspci -mn | awk '$2 == "\"0300\"" { gsub ("\"",""); print toupper($3$4) }' | uniq)"

	# Using anything other than native xorg drivers has (so far) failed on most systems
        # with several different display controllers. DUALCARD is a regex of PCI IDs which support
        # more than one card with proprietary drivers.
	# In all other cases we just fall back to xorg-autoconfig.
	if [ $(echo "${_DEVICES}" | wc -l) -ne 1 -a $(echo "$_DEVICES" | grep -c ${DUALCARD} ) -ne 2 ]
	then
		LIVE_XORG_DRIVER="xorg-autoconfig"
		return
	fi

	# pci-id of the first graphic card, from now on driver selection is based on the
        # first card only.
	_DEVICE="$(echo "${_DEVICES}" | head -n1)"

	# There are some GPUs that don't work with the proprietary drivers when booting via EFI
	# but they do work when booting via BIOS. Therefore we add them to an "EFI blacklist"
	# that enforces the usage of the open source drivers.
	if grep -q lernstick_efi_boot /proc/cmdline
	then
		if grep -q ${_DEVICE} /usr/share/lernstick-config/efi_blacklist
		then
			LIVE_XORG_DRIVER="xorg-autoconfig"
			return
		fi
	fi

	# no PCI device found, hope the xorg autoconfiguration will figure it out
	if [ -z "${_DEVICE}" ]
	then
		LIVE_XORG_DRIVER="xorg-autoconfig"
		return
	fi

	# live-config specific xorg-driver overrides
	if ls /usr/share/live/config/xserver-xorg/*.ids > /dev/null 2>&1
	then
		for _OVERRIDE_IDS in /usr/share/live/config/xserver-xorg/*.ids
		do
			if [ -e "${_OVERRIDE_IDS}" ]
			then
				if grep -qs "${_DEVICE}" "${_OVERRIDE_IDS}"
				then
					LIVE_XORG_DRIVER="$(basename ${_OVERRIDE_IDS} .ids)"
					return
				fi
			fi
		done
	fi

	# xorg-driver automatic override for fglrx
	if echo "${_DEVICE}" | grep -qs '^1002'
	then
		if grep -qs "${_DEVICE}" /usr/share/fglrx/fglrx.ids
		then
			LIVE_XORG_DRIVER="fglrx"
			return
		fi
	fi

	# xorg-driver automatic override for nvidia
	if echo "${_DEVICE}" | grep -qs -E '^(10DE|12D2)'
	then
		for _NVIDIA_IDS in /usr/lib/nvidia/current/nvidia.ids $(ls /usr/lib/nvidia/legacy-*/nvidia.ids | sort -V -r)
		do
			if [ -e "${_NVIDIA_IDS}" ]
			then
				if grep -qs "${_DEVICE}" ${_NVIDIA_IDS}
				then
					LIVE_XORG_DRIVER="nvidia"
					return
				fi
			fi
		done
	fi

	# fall back to xorg autoconfiguration
	LIVE_XORG_DRIVER="xorg-autoconfig"
}

Config ()
{
	Detect_xorg_driver

	# update nouveau blackist link
	case "${LIVE_XORG_DRIVER}" in
		nvidia)
			if [ -h /etc/modprobe.d/nvidia-blacklists-nouveau.conf ]
			then
				echo "compatible nvidia driver detected, nouveau is already blacklisted"
			else
				echo "compatible nvidia driver detected, blacklisting nouveau"
				ln -s /etc/nvidia/nvidia-blacklists-nouveau.conf /etc/modprobe.d/nvidia-blacklists-nouveau.conf
			fi
			;;

		*)
			echo "no compatible nvidia driver detected, removing nouveau blacklist file"
			rm -f /etc/modprobe.d/nvidia-blacklists-nouveau.conf
			;;
	esac
}

Config
